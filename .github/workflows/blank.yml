# This is a basic workflow to help you get started with Actions

name: distory-infra

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "distory" ]
  pull_request:
    branches: [ "distory" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch: 

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    
    environment: dev
    outputs:
      SERVER_PUBLIC_IP: ${{ steps.set-ip.outputs.instance_public_ip}}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: '${{ secrets.AWS_ACCESS_KEY_ID }}'
        aws-secret-access-key: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
        aws-region: us-east-1

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
          terraform_wrapper: false     

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform directory
      run: cd terraform

    - name: Terraform Init
      run: |
          cd terraform/
          terraform init
          terraform validate
          terraform plan 
          terraform destroy -auto-approve

    - name: check pwd
      run: pwd
    # Generates an execution plan for Terraform
    #- name: Terraform Plan
    #  run: terraform plan

      # On push to "master", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    #- name: Terraform Apply
    #  if: github.ref == 'refs/heads/"master"' && github.event_name == 'push'
    #  run: terraform apply -auto-approve  
    - name: Set output
      id: set-ip
      run: |-
        echo "::set-output name=instance_public_ip::$(terraform output instance_public_ip)"
      working-directory: ./terraform

